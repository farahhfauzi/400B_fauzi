
{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''\n",
    "Homework 5\n",
    "Mass Profile \n",
    "Farah Fauzi\n",
    "'''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import modules\n",
    "import numpy as np\n",
    "import astropy.units as u\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "\n",
    "from astropy import constants as const\n",
    "from operator import add\n",
    "from ReadFile import Read\n",
    "from centerofmass_redo import CenterOfMass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create class MassProfile\n",
    "class MassProfile:\n",
    "    \n",
    "    def __init__(self, galaxy, snap):\n",
    "        # Inputs:\n",
    "        #    filename = input only the galaxy name\n",
    "        ilbl = '000' + str(snap)\n",
    "        ilbl = ilbl[-3:]\n",
    "        self.filename = \"%s_\"%(galaxy) + ilbl + '.txt'\n",
    "        \n",
    "        self.time, self.total, self.data = Read(self.filename)\n",
    "        self.x = self.data['x']\n",
    "        self.y = self.data['y']\n",
    "        self.z = self.data['z']\n",
    "        self.m = self.data['m']\n",
    "        self.gname = galaxy\n",
    "        \n",
    "    def MassEnclosed(self, ptype, r):\n",
    "        COMObject = CenterOfMass(self.filename,ptype)\n",
    "        COM = COMObject.COM_P(0.1)\n",
    "        #print(COM)\n",
    "        massArr = []\n",
    "        for i in r:\n",
    "            mass = 0\n",
    "            for j in range(len(self.x)):\n",
    "                if ( abs(COM[0]-self.x[j]*u.kpc) < i and \n",
    "                    abs(COM[1]-self.y[j]*u.kpc) < i and \n",
    "                    abs(COM[2]-self.z[j]*u.kpc) < i):\n",
    "                    mass = mass + self.m[j]\n",
    "            massArr.append(mass)\n",
    "        #print(massArr*u.Msun*1e10)\n",
    "    \n",
    "        return massArr*u.Msun*1e10\n",
    "        \n",
    "    def MassEnclosedTotal(self,r):\n",
    "        totMassEach = []\n",
    "        totMass = []\n",
    "        for i in range (1,4):\n",
    "            mass = self.MassEnclosed(i,r)\n",
    "            totMassEach.append(mass)\n",
    "        totMass = list(map(add, totMassEach[0], totMassEach[1]))\n",
    "        if (self.gname != \"M33\"):\n",
    "            totMass = list(map(add, totMass, totMassEach[2]))\n",
    "        \n",
    "        return totMass\n",
    "        \n",
    "    def HernquistMass(self,r,a,Mhalo):\n",
    "        Mhalo = self.MassEnclosed(2,r)\n",
    "        return Mhalo*r**2/(a+r)**2\n",
    "    \n",
    "    def CircularVelocity(self,ptype,r):\n",
    "        Grav = const.G\n",
    "        G = Grav.to(u.kpc*u.km**2/u.s**2/u.Msun)\n",
    "        M = self.MassEnclosed(ptype,r)\n",
    "        \n",
    "        #nanti try boleh tk bahagi mcmni\n",
    "        #make sure dpt array of velocity\n",
    "        return np.sqrt(G*M/r)\n",
    "    \n",
    "    def CircularVelocityTotal(self,r):\n",
    "        Grav = const.G\n",
    "        G = Grav.to(u.kpc*u.km**2/u.s**2/u.Msun)\n",
    "        totVelEach = []\n",
    "        totVel = []\n",
    "        for i in range(1,4):\n",
    "            v = self.CircularVelocity(i,r)\n",
    "            totVelEach.append(v)\n",
    "        #totVel = np.sqrt(totVelEach[0]**2+totVelEach[1]**2+totVelEach[2])\n",
    "        \n",
    "        #nanti try boleh tk bahagi mcmni\n",
    "        #check !\n",
    "        #unit kena betul & make sure array\n",
    "        return totVel\n",
    "    \n",
    "    def HerquistVCirc(r,a,Mhalo):\n",
    "        Grav = const.G\n",
    "        G = Grav.to(u.kpc*u.km**2/u.s**2/u.Msun)\n",
    "        M = self.Hernquist(r, a, Mhalo)\n",
    "        \n",
    "        return np.sqrt(G*M/r)        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def MPPlot(galaxy,r):\n",
    "    fig = plt.figure(figsize=(7,7))\n",
    "    ax = plt.subplot(111)\n",
    "    ax.semilogy(r,galaxy.MassEnclosed(1,r),'b^')\n",
    "    ax.semilogy(r,galaxy.MassEnclosed(2,r),'g^')\n",
    "    if (galaxy != \"M33\"):\n",
    "        ax.semilogy(r,galaxy.MassEnclosed(3,r),'r^')\n",
    "    plt.xlim([0.20,30.5])\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def RCPlot(galaxy,r):\n",
    "    fig = plt.figure(figsize=(7,7))\n",
    "    ax = plt.subplot(111)\n",
    "    ax.semilogy(r,galaxy.CircularVelocity(1,r),'b^')\n",
    "    ax.semilogy(r,galaxy.CircularVelocity(2,r),'g^')\n",
    "    if (galaxy != \"M33\"):\n",
    "        ax.semilogy(r,galaxy.CircularVelocity(3,r),'r^')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 504x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "MW = MassProfile(\"MW\",0)\n",
    "M31 = MassProfile(\"M31\",0)\n",
    "M33 = MassProfile(\"M33\",0)\n",
    "\n",
    "r = np.arange(0.25,30.5,1.5)*u.kpc\n",
    "a = 1\n",
    "#Mhalo = MW.MassEnclosed(2,r)\n",
    "ptype = 1\n",
    "\n",
    "#Question 2 - MW.MassEnclosed(1,r)\n",
    "#Question 3 - MW.MassEnclosedTotal(r)\n",
    "#Question 4 - MW.HerquistMass(r,a,Mhalo)\n",
    "#Question 5 - MW.CircularVelocity(ptype,r)\n",
    "#Question 6 - MW.CircularVelocityTotal(r)\n",
    "#Question 7 - MW.HerquistVCirc(r,a,Mhalo)\n",
    "\n",
    "galaxies = [MW,M31,M33]\n",
    "for galaxy in galaxies:\n",
    "    MPPlot(galaxy,r)\n",
    "for galaxy in galaxies:\n",
    "    RCPlot(galaxy,r)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
